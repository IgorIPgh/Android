package algorithms;

import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import android.graphics.Path;
import android.os.AsyncTask;
import android.os.Handler;
import android.util.Log;
import android.widget.Toast;
import entities.Node;
import entities.Obstacle;
import entities.Player;
import entities.SideNode;
import entities.Target;
import math.Vector;
import com.example.pathfinder.*;
import views.AnimatePath;

public class AStar {
	
	public static String FILE_NAME = "positions.txt";
	
	Vector vector = new Vector();
	Node node;
	Player player;
	Target target;
	ArrayList<Obstacle> o;
	Thread background;
	public ArrayList<Vector> savedPositions = new ArrayList<Vector>();
	int iterations;
	private Handler handler;
	boolean isRunning = false;
	boolean dtype = false;
	private boolean neighbours;
	
	Vector selectedNode = new Vector();
	
	AnimatePath view;
	
	public int gridSize, xOffSet, x0, dd;

	public AStar(int gridSize, int xOffset, int x0, int dd, Target target, Player player, ArrayList<Obstacle> o, AnimatePath view, boolean neighbours, boolean d) {
		this.gridSize = gridSize;
		this.xOffSet = xOffset;
		this.x0 = x0;
		this.dd = 0;
		this.target = target;
		this.player = player;
		this.o = o;
		this.neighbours = neighbours;
		dtype = d;
		selectedNode = player.getPosition();
		this.view = view;
	}
	
	public ArrayList<Vector> findPath(Vector startPos, Vector targetPos) {
		savedPositions.clear();
		final Node startNode = new Node((int) startPos.getX(), (int) startPos.getY());
		final Node targetNode = new Node((int) targetPos.getX(), (int) targetPos.getY());
		Node lastNode = new Node();
		ArrayList<Obstacle> gridObstacles = o;
		
		ArrayList<Node> openSet = new ArrayList<Node>();
		HashSet<Node> closedSet = new HashSet<Node>();
		openSet.add(startNode);
		iterations = 0;
		int maxIterations = 0x4000 /*(int) Math.pow(2, 14)*/;
		
		while(openSet.size() > 0) {
			try {
				Node currentNode = openSet.get(0);
				for(int i = 1; i < openSet.size(); i++) {
					if(openSet.get(i).fCost() <= currentNode.fCost() && openSet.get(i).gethCost() < currentNode.gethCost()) {
							currentNode = openSet.get(i);
					}
				}
				
				openSet.remove(currentNode);
				closedSet.add(currentNode);
				iterations++;
				
				if(iterations > maxIterations) {
					view.setIterationsCount(iterations);
					view.makeToast("Слишком долго!", Toast.LENGTH_LONG);
					
					return null;
				}
				
				// if(Math.abs(currentNode.getX() - targetNode.getX()) == 1  && Math.abs(currentNode.getY() - targetNode.getY()) == 1) {
				if(currentNode.getX() == targetNode.getX() && currentNode.getY() == targetNode.getY()) {
					try {
						targetNode.setParent(currentNode);
						view.setIterationsCount(iterations);
						savedPositions = retracePath(startNode, targetNode);
						
						return savedPositions;
					} catch (Exception e) {
						e.printStackTrace();}
				}
			
				boolean foundObstacle = false;
				ArrayList<Node> neighbours = view.getNeighbours(currentNode);
				for(Node neighbour : neighbours) {
					for(Obstacle o : gridObstacles) {
						if(!neighbour.isWalkable(o) || closedSet.contains(neighbour)) {
							foundObstacle = true;
							/* if(view.checkObstacle(o)) {
								savedPositions = retracePath(startNode, lastNode);
								view.makeToast("Невозможно пройти!", Toast.LENGTH_LONG);
							} */
						}
					}
					
					if(foundObstacle) {
						foundObstacle = false;
						continue;
					}
					
					if(this.neighbours)
						view.drawSideNode(new SideNode(neighbour.getX(), neighbour.getY()));
					int distance = dtype ? getEDistance(currentNode, neighbour) : getMDistance(currentNode, neighbour);
					int newMovementCost = currentNode.getgCost() + distance;
					if(newMovementCost < neighbour.getgCost() || !openSet.contains(neighbour)) {
						neighbour.setgCost(newMovementCost);
						neighbour.sethCost(dtype ? getEDistance(neighbour, targetNode) : getMDistance(neighbour, targetNode));
						neighbour.setParent(currentNode);
						lastNode = neighbour;
						if(!openSet.contains(neighbour))
							openSet.add(neighbour);
					}
				}
			} catch (Exception e) {
				e.printStackTrace();}
		}
		
		return savedPositions;
	}
	
	public ArrayList<Vector> getSavedPositions() {
		if(!savedPositions.isEmpty())
			return savedPositions;
		
		return null;
	}
	
	public ArrayList<Vector> retracePath(Node startNode, Node endNode) {
		ArrayList<Node> path = new ArrayList<Node>();
		ArrayList<Node> checkpoints = new ArrayList<Node>();
		ArrayList<Vector> positions = new ArrayList<Vector>();
		Node currentNode = endNode;
		
		try {
			while(!currentNode.equals(startNode)) {
			path.add(currentNode);
			currentNode = currentNode.getParent();
		}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		for(int i = 0; i <= path.size() - 1; i++) {
			checkpoints.add(i, path.get(path.size() - 1 - i));
		}
		
		for(int j = 0; j <= checkpoints.size() - 1; j++) {
			positions.add(checkpoints.get(j).getPosition());
		}
		
		return positions;
	}
	
	public int getMDistance(Node a, Node b) {
		int distanceX = Math.abs(a.getX() - b.getX());
		int distanceY = Math.abs(a.getY() - b.getY());
		
		int d = Node.DIAGONAL_COST;
		int h = Node.CELL_COST;
		
		if(distanceX > distanceY) 
			return d * distanceY + h * (distanceX - distanceY);
		else 
			return d * distanceX + h * (distanceY - distanceX);
	}
	
	public int getEDistance(Node a, Node b) {
		int dx = Math.abs(a.getX() - b.getX());
		int dy = Math.abs(a.getY() - b.getY());
		
		int h = Node.CELL_COST;
		
		return (int) Math.sqrt(dx * dx + dy * dy) * h;
	}

	public Vector getSelectedNode() {
		return selectedNode;
	}

	public void setSelectedNode(Vector selectedNode) {
		this.selectedNode = selectedNode;
	}

}
